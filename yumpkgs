#!/usr/bin/python

#IMPORTS

import os, sys, sqlite3, getopt, urllib2, re, bz2, pygtk, gtk,gtk.glade
pygtk.require("2.0")

#GLOBAL VARIABLES

#General information
PROG_DIR = '.'
PROG_NAME = os.path.basename(sys.path[0])

#Metadata
nodes = {}
pkgsloc = []
cur = None
con = None

#Browser
ua = { 'User-agent' : 'Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/532.5 (KHTML, like Gecko) Chrome/3.0.195.38 Safari/532.5' }

#List that holds the file names to download
PKGLIST_PATH = PROG_DIR + '/downloads.list'
PKGLIST = None

#Command line options
opt = {'arch' : 'i386', 
       'baseurl' : '', 
       'down' : 0,
       'downdir' : '',
       'gui' : 0, 
       'install' : 0,
       'justdown' : 0, 
       'metadata' : '',
       'pkgs' : [], 
       'quiet' : 0,
       'rel' : '13',
       'search' : '',
       'update': 0
       }

#GUI
builder = None
window = None
treeview = None
liststore = None
entry = None
btOk = None
btFind = None
col = None
col2 = None

#FUNCTIONS

#Help message
def helpmsg():
    print PROG_NAME + ''' options -p pkgname,pkgname...

OPTIONS

-q             change to the quiet mode
-m <metadata>  specify the metadata
-b <baseurl>   specify the baseurl
-D <dir>       specify the program directory
-g             add the graphical usuer interface (GUI)
-d             download the metadata and the packages if needed
-r <rel>       specify the release(from 1 to current)
-a <arch>      specify the arch(i386, x86_64, etc.)
-i             display an ordered list of packages to be installed
-h             display the help message (this message)
-s <regex>     display package names matching a regex

PKGNAME

* Name of one package, the others should be separated by comma.

EXAMPLES

Below we gather the dependencies for bash and gcc.

$ ''' + PROG_NAME + ' -q -p bash,gcc'

    sys.exit()


#Walk the tree
def walkTree(pkg):

    #Variables
    global pkgsloc, nodes
    names = []
    deps = []

    #Retreive a list dependencies
    cur.execute("select requires.name from packages,requires where packages.pkgKey = requires.pkgKey and packages.name = '" + pkg + "'")
    deps = cur.fetchall()
    if not opt['quiet']:
        print '* Deps - files: ',
        for row in deps:
            print row[0],
        print ''

    #List wich pkg names solve the given dependencies
    if not opt['quiet']: 
        print '* Deps - package names: ',
    for row in deps:
        cur.execute("select pkgKey from provides where provides.name = '" + row[0] + "'")
        pkgKey = cur.fetchone()
        if pkgKey:
            cur.execute("select name from packages where packages.pkgKey = '" + str(pkgKey[0]) + "'")
            newname = cur.fetchone()[0]
            if newname not in names:
                names.append(newname)
            cur.execute("select location_href from packages where packages.pkgKey = '" + str(pkgKey[0]) + "'")
            pkgloc = cur.fetchone()[0]
            if pkgloc not in pkgsloc:
                pkgsloc.append(pkgloc)

    if not opt['quiet']:
        for name in names:
            print name,

    #While its a "node" we need to walk
    for name in names:
	if not nodes.get(name,0):
	    if not opt['quiet']:
                print '\n\n* Walking: ' + name
	    nodes[name] = 1
	    walkTree(name)

#Make the entries unique
def depsToFile():

    #Variables
    global pkgsloc,PKGLIST,liststore,col,col2,treeview
    order = 1

    if opt['gui']:
        treeview.show()
        col.set_title('Location')
        col2.set_title('Install order')

    PKGLIST = open(PKGLIST_PATH,'w')    
    pkgsloc.reverse()
    for loc in pkgsloc:
	PKGLIST.write(opt['baseurl'] + '/' + loc + '\n')
        if opt['gui']: 
            liststore.append([loc,order])
            order += 1
    PKGLIST.close()

#List the pacakges to be installed in order to be installed
def installPkgs():

    #Variables
    global PKGLIST_PATH, PROG_DIR

    for pkgurl in open(PKGLIST_PATH):
        pkgname = os.path.basename(pkgurl).rstrip('\n')
	pkgfile = opt['downdir'] + '/' + pkgname
	if os.path.isfile(pkgfile):
	    print 'rpm -i ' + pkgfile
	else:
	    print 'Missing: ' + pkgfile
            if opt['down']:
                print 'Downloading...'
                down(pkgurl,opt['downdir'] + '/' + pkgname)

#Download files
def down(url,location):
    dest = open(location,'w')
    dest.write(urllib2.urlopen(urllib2.Request(url,None,ua)).read())
    dest.close()

#Get dependencies
def getDeps(widget,event):

    #Variables
    global entry,cur,pkgsloc,nodes,liststore

    #If in GUI mode
    if opt['gui']: 
        if event.type == gtk.gdk.KEY_PRESS and event.keyval != gtk.keysyms.Return:
            return(0)
        liststore.clear()
        nodes = {}
        pkgsloc = []
        text = entry.get_text()
        if(text != ''): 
            opt['pkgs'] = text.split(',')
        else:
            return(0)

    for pkg in opt['pkgs']:
        if not nodes.get(pkg,0):
            nodes[pkg] = 1
        else:
            continue
        print '\n> ' + pkg + '\n'
        cur.execute('select location_href from packages where packages.name = "' + pkg + '"')
        pkgloc = cur.fetchone()[0]
        pkgsloc.append(pkgloc)
        walkTree(pkg)
    depsToFile()
    
def toVersion(string):
    version = ''
    for num in string.split('.'):
        version += "%02d" % int(num)
    return version

#What is necessary to update the system
def update():

    global col,col2,treeview,liststore

    rpm = os.popen("./rpm -qa")
    if opt['gui']: 
        treeview.show()
        col.set_title('Package name')
        col2.set_title('Version')
        liststore.clear()
    else:
        print '%-20s %s\n' % ('NAME','NEW VERSION')
    for line in rpm.readlines():
        tmp = line.rstrip('\n')
        matched = re.search("([^-]+)-([0-9.]+)",tmp)
        name = matched.group(1)
        version = matched.group(2)
        norm_version = toVersion(version)
        found = search('^' + name + '$')
        for name in found.keys():
            norm_found_version = toVersion(found[name])
            if norm_found_version > norm_version:
                if opt['gui']:
                    liststore.append([name,found[name]])
                else:
                    print '%-20s %s' % (name,found[name])
        

#Auxiliar function for searching functions
def search(regex):

    #Variables
    global cur
    matches = {}

    cur.execute('select name,version from packages')
    for row in cur.fetchall():
        if re.search(regex,row[0]):
            matches[row[0]] = row[1]
    return matches
    
#Search for packages
def searchPkgs(widget,event):

    #Variables
    global entry,cur,liststore,treeview
    regex = ''
    pkgs = {}

    #If in GUI mode
    if opt['gui']: 
        treeview.show()
        col.set_title('Package name')
        col2.set_title('Version')
        if event.type == gtk.gdk.KEY_PRESS and event.keyval != gtk.keysyms.Return:
            return(0)
        liststore.clear()
        regex = entry.get_text()
    else:
        regex = opt['search']

    pkgs = search(regex)
    if not opt['gui']: 
        print '%-40s %s\n' % ('NAME','VERSION')
    for name in pkgs.keys():
        if opt['gui']:
            liststore.append([name,pkgs[name]])
        else:
            print '%-40s %s' % (name,pkgs[name])

#Initialize the GUI
def initGUI():

    #Varisbles
    global builder,window,treeview,liststore,entry,btOk,col,col2

    #Retrieve objects
    builder = gtk.Builder()
    builder.add_from_file("gui.glade")
    window = builder.get_object("window1")
    treeview = builder.get_object("treeview1")
    entry = builder.get_object("entry1")
    btOk = builder.get_object("button1")
    btFind = builder.get_object("button2")

    #Connect events
    window.connect("destroy",gtk.main_quit)
    btOk.connect("button-press-event",getDeps)
    btFind.connect("button-press-event",searchPkgs)
    btOk.connect("key-press-event",getDeps)
    btFind.connect("key-press-event",searchPkgs)

    #Create the treeview
    liststore = gtk.ListStore(str,str)
    treeview.set_model(liststore)
    rend = gtk.CellRendererText()
    rend2 = gtk.CellRendererText()
    col = gtk.TreeViewColumn('',rend,text=0)
    col2 = gtk.TreeViewColumn('',rend2,text=1)
    treeview.append_column(col)
    treeview.append_column(col2)

    #Show
    window.show_all()
    treeview.hide()

    #Start the gtk loop
    gtk.main()
            
#START

#Handle the command line arguments
opts, args = getopt.getopt(sys.argv[1:],'hb:dD:gijm:p:qs:ux:')   
for o, val in opts:
    if o == '-h':
        helpmsg()
    elif o == '-b': 
        opt['baseuri'] = val
    elif o == '-d': 
        opt['down'] = 1
    elif o == '-D': 
        PROG_DIR = val
    elif o == '-g': 
        opt['gui'] = 1
    elif o == '-i': 
        opt['install'] = 1
    elif o == '-j': 
        opt['justdown'] = 1
    elif o == '-m': 
        opt['metadata'] = val
    elif o == '-p': 
        opt['pkgs'] = val.split(',')
    elif o == '-q': 
        opt['quiet'] = 1
    elif o == '-s': 
        opt['search'] = val
    elif o == '-u': 
        opt['update'] = 1
    elif o == '-x': 
        opt['downdir'] = val
    else:
        print 'Unknown option: ' + o
        helpmsg()

#Download directory
if not opt['downdir']:
    opt['downdir'] = PROG_DIR + '/downloads'

#Installation
if opt['install']:
    installPkgs()
    sys.exit()

#Checking if package names was supplied
if not opt['pkgs'] and not opt['search'] and not opt['gui'] and not opt['update']:
    print 'Please specify at least one package name.'
    print 'Ex.: ' + PROG_NAME + ' -p glibc'
    sys.exit(1)

#Base URL to the metadata
if not opt['baseurl']:
    if not opt['arch'] or not opt['rel']:
	print "Please specify the an architecture and and release."
        sys.exit(1)
    opt['baseurl'] = 'http://download.fedora.redhat.com/pub/fedora/linux/releases/' + opt['rel'] + '/Everything/' + opt['arch'] + '/os'

#Metadata file name
if not opt['metadata']: 
    opt['metadata'] = PROG_DIR + '/primary-' + opt['arch'] + '.sqlite'

#Check the existence of metadata
if not os.path.isfile(opt['metadata']):
    if os.path.isfile(opt['metadata'] + '.bz2'):
        print 'Decompressing metadata...'
        decompressed = open(opt['metadata'],'w')
        compressed = bz2.BZ2File(opt['metadata'] + '.bz2')
        decompressed.write(compressed.read())
        compressed.close()
        decompressed.close()
    else:
        print 'The metadata does not exist.'
        if opt['down']:
        
            #Download the page and extract the link
            if not opt['quiet']:
                print 'Fetching: ' + opt['baseurl'] + '/repodata/'
                req = urllib2.Request(opt['baseurl'] + '/repodata/',None,ua)
                buf = ''
                for char in urllib2.urlopen(req).read():
                    buf += char.rstrip('\n')
                matched = re.search('href="([^"]+primary\.sqlite\.bz2)"',buf)
                if matched:
                    if not opt['quiet']:
                        print 'Matched: ' + matched.group(1)
                        down(opt['baseurl'] + '/repodata/' + matched.group(1),opt['metadata'] + '.bz2')
                        decompressed = open(opt['metadata'],'w')
                        compressed = bz2.BZ2File(opt['metadata'] + '.bz2')
                        decompressed.write(compressed.read())
                        compressed.close()
                        decompressed.close()
                    else:
                        print 'Could not down the metadata.Try again latter.'
                        sys.exit(1)

#Just download
if not opt['justdown']:
    if os.path.isfile(PKGLIST_PATH):
        os.unlink(PKGLIST_PATH)
    con = sqlite3.connect(opt['metadata'])
    cur = con.cursor()
    if opt['gui']:
        initGUI()
    else:
        if opt['search']:
            searchPkgs(None,None)
        elif opt['update']:
            update()
        else:
            getDeps(None,None)                
    con.close()
